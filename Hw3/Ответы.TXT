1. Когда используются контейнеры типа (мульти) множество и отображение?
set(multi) - для хранения обЪектов в отсортированном виде
map(multi) - позволяет хранить данные вида "ключ" - "значение"

2. Каким требованиям должна удовлетворять качественная хэш-функция?
хеш-функция должна обладать свойством необратимости, функция должна минимизировать число коллизий, 
функция должна распределять ключи в хеш-таблице наиболее равномерно, функция должна быть простой с вычислительной точки зрения,
всегда возвращать один и тот же адрес для одного и того же ключа, 

3. Из-за чего в хэш-таблицах возникают коллизии и как можно их разрешать?
Коллизии существуют для большинства хеш-функций, но для «хороших» хеш-функций частота их возникновения близка к теоретическому минимуму.
Методы решения этой проблемы: метод цепочек, открытая адресация, двойное хеширование, увееличение размера хеш-таблицы.

4. Почему сложность основных операций хэш-таблиц в худшем случае O(N)?
Коллизии, на решение которых потребуется время.

5. Что позволяет сделать инструмент создания контейнеров Boost.Multiindex?
Позволяет определять контейнеры, поддерживающие произвольное количество интерфейсов.